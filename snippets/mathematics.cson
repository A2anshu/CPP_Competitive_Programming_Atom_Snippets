'.source.cpp, .source.cc':

  'Modular Division':
    'prefix': 'modular-division'
    'body': '''
	pair<ll,pair<ll,ll> > egcd(ll a, ll b)				//solves ax + by = gcd(a,b) = g
	{								//returns (g,(x,y))
		pair<ll,pair<ll,ll> > ret;
		if (a==0)
		{
			ret.f = b ;
			ret.s.f = 0 ;
			ret.s.s = 1 ;
		}
		else
		{
			ll g, x, y;
			pair<ll,pair<ll,ll> > temp = egcd( b%a, a) ;
			g = temp.f;
			x = temp.s.f;
			y = temp.s.s;
			ret.f = g;
			ret.s.f = y - (b/a)*x ;
			ret.s.s = x;
		}
		return ret;
	}
	ll modinv(ll den, ll m)
	{
		pair<ll,pair<ll,ll> > ans = egcd(den, m) ;
		if (ans.f == 1)
		{
			return (ans.s.f+m) % m ;
		}
	}
	ll moddiv(ll num, ll den, ll m)		// den and m must be coprime
	{
		return (num * modinv(den,m) ) % m ;
	}
    '''

  'Power in logarithmic time':
    'prefix': 'power'
    'body': '''
	ll power(ll a, ll b)	//a is base, b is exponent
	{
		if(b==0)
			return 1;
		if(b==1)
			return a;
		if(b%2 == 1)
			return (power(a,b-1)*a)%mod;
		ll q = power(a,b/2);
		return (q*q)%mod;
	}
    '''

  'Greatest Common Divisor':
    'prefix': 'gcd'
    'body': '''
	ll gcd( ll a, ll b )
	{
		if(b==0)
		{
		     return a;
		}
		else
		{
		     return gcd( b, a%b );
		}
	}
	ll lcm (ll a, ll b)
	{
		return (a*b)/gcd(a,b);
	}
    '''

  'nCr % m:O(m^2logn), N is greater than m. (m is small) Lucas theorem':
    'prefix': 'binomial-small-mod'
    'body': '''
	ll dp(int n, int r, ll p)
	{
		ll memo[r+1];
		mem(memo,0);

		memo[0] = 1;

		for (int i = 1; i <= n; i++)
		{
			for (int j = min(i,r); j > 0; j--)
			{
				memo[j] = (memo[j] + memo[j-1]) % p ;
			}
		}
		return memo[r];
	}
	ll C(ll n, ll r, ll p)			 // p is small prime
	{
		if (r==0)
		{
			return 1;
		}
		if (r>n)		//degenerate case
		{
			return 0;
		}

		int nd = n%p;
		int rd = r%p;

		return ( C(n/p, r/p, p)*dp(nd, rd, p) )%p;

	}
    '''

  'nCr % m:O(nlog(no. of digits in n)), n<m [finds nCr for all 0<=r<=n in fact vector] (m is large Prime) Modular Division - Euclid Extended theorem':
    'prefix': 'binomial-big-mod'
    'body': '''
	pair<ll,pair<ll,ll> > egcd(ll a, ll b)				//solves ax + by = gcd(a,b) = g;
	{													//returns (g,(x,y))
		pair<ll,pair<ll,ll> > ret;

		if (a==0)
		{
			ret.f = b ;
			ret.s.f = 0 ;
			ret.s.s = 1 ;
		}
		else
		{
			ll g, x, y;
			pair<ll,pair<ll,ll> > temp = egcd( b%a, a) ;
			g = temp.f;
			x = temp.s.f;
			y = temp.s.s;
			ret.f = g;
			ret.s.f = y - (b/a)*x ;
			ret.s.s = x;
		}

		return ret;
	}
	ll modinv(ll den, ll m)			// den and m must be coprime
	{
		pair<ll,pair<ll,ll> > ans = egcd(den, m) ;
		if (ans.f == 1)
		{
			return (ans.s.f+m) % m ;
		}
	}
	ll moddiv(ll num, ll den, ll m)
	{
		return (num * modinv(den,m) ) % m ;
	}
	vll fact;
	void C( int n, ll m)		// n must be less than m
	{
		fact.reserve(n+1);
		fact[0] = 1;
		vll num(n+1,1);  // n*(n-1)*(n-2).....(n-k+1)
		for (int i = 0; i<n ; i++)
		{
			num[i+1] = (num[i]*(n-i)) % m ;
		}

		vll den(n+1,1);   //k!
		for (int i = 1; i <= n; i++)
		{
			den[i] = (den[i-1]*i) % m ;
		}

		for (int i = 1; i <= n; i++)
		{
			fact[i] = moddiv(num[i], den[i], m);
		}
	}
    '''

  'BigInt in c++':
    'prefix': 'bigint'
    'body': '''
	struct bigint{
	  static const int LEN = 60;
	  static const int BIGMOD = 10000;
	  int s;			// sign of big integer
	  int vl, v[LEN];	// vl is length of v array
	  bigint() : s(1) { vl = 0; }   // eg. bigint x;

	  bigint(long long a) {			// eg. bigint x(a);
		s = 1; vl = 0;
		if (a < 0) { s = -1; a = -a; }
		while (a) {
		  push_back(a % BIGMOD);
		  a /= BIGMOD;
		}
	  }

	  bigint(string str) {			// eg. bigint x(str);
		s = 1; vl = 0;
		int stPos = 0, num = 0;
		if (!str.empty() && str[0] == '-') {
		  stPos = 1;
		  s = -1;
		}
		for (int i=str.length()-1, q=1; i>=stPos; i--) {
		  num += (str[i] - '0') * q;
		  if ((q *= 10) >= BIGMOD) {
			push_back(num);
			num = 0; q = 1;
		  }
		}
		if (num) push_back(num);
	  }
	  int len() const {
		return vl;
	  }

	  bool empty() const { return len() == 0; }

	  void push_back(int x) {
		v[vl++] = x;
	  }

	  void pop_back() {
		vl--;
	  }

	  int back() const {
		return v[vl-1];
	  }

	  void n() {
		while (!empty() && !back()) pop_back();
	  }

	  void resize(int nl) {
		vl = nl;
		memset(v,0,sizeof(int)*vl);
	  }
	  void print() const {
		if (empty()) { putchar('0'); return; }
		if (s == -1) putchar('-');
		printf("%d", back());
		for (int i=len()-2; i>=0; i--) printf("%.4d",v[i]);
	  }

	  friend std::ostream& operator << (std::ostream& out, const bigint &a) {
		if (a.empty()) { out << "0"; return out; }
		if (a.s == -1) out << "-";
		out << a.back();
		for (int i=a.len()-2; i>=0; i--) {
		  char str[10];
		  snprintf(str, 5, "%.4d", a.v[i]);
		  out << str;
		}
		return out;
	  }
	  int compare(const bigint &b)const {
		if (s != b.s) return s - b.s;
		if (s == -1) return -(-*this).compare(-b);
		if (len() != b.len()) return len()-b.len();//int
		for (int i=len()-1; i>=0; i--)
		  if (v[i]!=b.v[i]) return v[i]-b.v[i];
		return 0;
	  }
	  bool operator < (const bigint &b)const{ return compare(b)<0; }
	  bool operator <= (const bigint &b)const{ return compare(b)<=0; }
	  bool operator == (const bigint &b)const{ return compare(b)==0; }
	  bool operator != (const bigint &b)const{ return compare(b)!=0; }
	  bool operator > (const bigint &b)const{ return compare(b)>0; }
	  bool operator >= (const bigint &b)const{ return compare(b)>=0; }
	  bigint operator - () const {
		bigint r = (*this);
		r.s = -r.s;
		return r;
	  }
	  bigint operator + (const bigint &b) const {
		if (s == -1) return -(-(*this)+(-b));
		if (b.s == -1) return (*this)-(-b);
		bigint r;
		int nl = max(len(), b.len());
		r.resize(nl + 1);
		for (int i=0; i<nl; i++) {
		  if (i < len()) r.v[i] += v[i];
		  if (i < b.len()) r.v[i] += b.v[i];
		  if(r.v[i] >= BIGMOD) {
			r.v[i+1] += r.v[i] / BIGMOD;
			r.v[i] %= BIGMOD;
		  }
		}
		r.n();
		return r;
	  }
	  bigint operator - (const bigint &b) const {
		if (s == -1) return -(-(*this)-(-b));
		if (b.s == -1) return (*this)+(-b);
		if ((*this) < b) return -(b-(*this));
		bigint r;
		r.resize(len());
		for (int i=0; i<len(); i++) {
		  r.v[i] += v[i];
		  if (i < b.len()) r.v[i] -= b.v[i];
		  if (r.v[i] < 0) {
			r.v[i] += BIGMOD;
			r.v[i+1]--;
		  }
		}
		r.n();
		return r;
	  }
	  bigint operator * (const bigint &b) {
		bigint r;
		r.resize(len() + b.len() + 1);
		r.s = s * b.s;
		for (int i=0; i<len(); i++) {
		  for (int j=0; j<b.len(); j++) {
			r.v[i+j] += v[i] * b.v[j];
			if(r.v[i+j] >= BIGMOD) {
			  r.v[i+j+1] += r.v[i+j] / BIGMOD;
			  r.v[i+j] %= BIGMOD;
			}
		  }
		}
		r.n();
		return r;
	  }
	  bigint operator / (const bigint &b) {
		bigint r;
		r.resize(max(1, len()-b.len()+1));
		int oriS = s;
		bigint b2 = b; // b2 = abs(b)
		s = b2.s = r.s = 1;
		for (int i=r.len()-1; i>=0; i--) {
		  int d=0, u=BIGMOD-1;
		  while(d<u) {
			int m = (d+u+1)>>1;
			r.v[i] = m;
			if((r*b2) > (*this)) u = m-1;
			else d = m;
		  }
		  r.v[i] = d;
		}
		s = oriS;
		r.s = s * b.s;
		r.n();
		return r;
	  }
	  bigint operator % (const bigint &b) {
		return (*this)-(*this)/b*b;
	  }
	};
    '''
